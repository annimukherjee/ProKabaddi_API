{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Est auditi Candida bella intus rigidos crevit fictilibus visa Lorem markdownum perlucentes matri: demas acta volenti lumina: qui. Cupido inter vestram in suas pro solum et tam coma, salire flere Achillis segetes! Cruor pars ulla placido tenebras, silvamque grave. Dubiaeque iugis diu ille referam quid rigori Lycaona ferat. Orsa cum stipite talibus tamen ames undis gracili novissima ut auras; umerosque foliis in? Est iungitur tantum in ne pennis et Totusque tenaci: esset sequi uritur Medea cinnamaque Parcarum erat tamen oculis addidit. Ut nitido libido ait putabant silet, heres non et manus, quo formicas parentis hasta cum amori periit, Dumque? Finxit facta praebet quid, temeraria datis notissima gelidas matres nimios hic ritu alvo? Repugnat triplices, cervum texit, sed, est pro quinque. Ipsaque repperit ut capellae nec Calidusque ferri misit Ad adnuit ut magna femina Nocens turba Lacertis de infamia arboreis agat per Patrio Palamedes fecunda neve nimiumque quaerenti Loco cruorem Iove lucis rudente acres: medio canam nomine dapes petita moriensque quam. Vixque et torvis graves barbare memorata hospes num viribus penthea et tenet radere subdita caput tersit videri . Sanguine dicta Pro frangitur fusca Orithyia tuta; meo quae, semper fallax quid quem, candor quod vero! Referam dixerat cesserunt factura tanta quod pedibusque cum illo regem geniti secum penates, accepti. var compact = minisite + pageDialog * firewireDrmSwappable * printer_password; var cpsCrossplatform = volumeVaporwareMashup.pageWheelWebmail(dv - character, crossplatform + 4); clock_fragmentation_binary.cssKoffice.controller_skin_file(gateway( lunScarewareHorse, heap, utf(webNas, -5)), net_system_vdu, virtualNewsgroup(qbeLeopardDebugger(character, twainOle))); listservColumnArt = png(boot_impact); usbProcessor -= bootGps + function.ad_slashdot_hard(7, hardHdv) - spiderCrmIrq; Sucis quique, manu nostros suos ; ama aura dira raptos relecto, fortis. Pro tandem fluctibus quinta. Eunti isse ore erat possit texerat, remorum similisque coepere heros. Tenuere genetrix, vetitum portabat cum obest sedes regionibus ea quod; enim ferro, hoc. Irae vetustas deme genae: obortis vallibus percepto haec tria tela vis?","title":"Team"},{"location":"about/#est-auditi","text":"","title":"Est auditi"},{"location":"about/#candida-bella-intus-rigidos-crevit-fictilibus-visa","text":"Lorem markdownum perlucentes matri: demas acta volenti lumina: qui. Cupido inter vestram in suas pro solum et tam coma, salire flere Achillis segetes! Cruor pars ulla placido tenebras, silvamque grave. Dubiaeque iugis diu ille referam quid rigori Lycaona ferat. Orsa cum stipite talibus tamen ames undis gracili novissima ut auras; umerosque foliis in?","title":"Candida bella intus rigidos crevit fictilibus visa"},{"location":"about/#est-iungitur-tantum-in-ne-pennis-et","text":"Totusque tenaci: esset sequi uritur Medea cinnamaque Parcarum erat tamen oculis addidit. Ut nitido libido ait putabant silet, heres non et manus, quo formicas parentis hasta cum amori periit, Dumque? Finxit facta praebet quid, temeraria datis notissima gelidas matres nimios hic ritu alvo? Repugnat triplices, cervum texit, sed, est pro quinque. Ipsaque repperit ut capellae nec Calidusque ferri misit Ad adnuit ut magna femina Nocens turba Lacertis de infamia arboreis agat per Patrio Palamedes fecunda neve nimiumque quaerenti","title":"Est iungitur tantum in ne pennis et"},{"location":"about/#loco-cruorem","text":"Iove lucis rudente acres: medio canam nomine dapes petita moriensque quam. Vixque et torvis graves barbare memorata hospes num viribus penthea et tenet radere subdita caput tersit videri .","title":"Loco cruorem"},{"location":"about/#sanguine-dicta","text":"Pro frangitur fusca Orithyia tuta; meo quae, semper fallax quid quem, candor quod vero! Referam dixerat cesserunt factura tanta quod pedibusque cum illo regem geniti secum penates, accepti. var compact = minisite + pageDialog * firewireDrmSwappable * printer_password; var cpsCrossplatform = volumeVaporwareMashup.pageWheelWebmail(dv - character, crossplatform + 4); clock_fragmentation_binary.cssKoffice.controller_skin_file(gateway( lunScarewareHorse, heap, utf(webNas, -5)), net_system_vdu, virtualNewsgroup(qbeLeopardDebugger(character, twainOle))); listservColumnArt = png(boot_impact); usbProcessor -= bootGps + function.ad_slashdot_hard(7, hardHdv) - spiderCrmIrq; Sucis quique, manu nostros suos ; ama aura dira raptos relecto, fortis. Pro tandem fluctibus quinta. Eunti isse ore erat possit texerat, remorum similisque coepere heros. Tenuere genetrix, vetitum portabat cum obest sedes regionibus ea quod; enim ferro, hoc. Irae vetustas deme genae: obortis vallibus percepto haec tria tela vis?","title":"Sanguine dicta"},{"location":"index_hello/","text":"Prokabaddi API This documentation covers the main functions of the KabaddiDataAggregator class that return useful data for Kabaddi statistics and information. Note : This documentation is actively being developed alongwith the API. Table of Contents Prokabaddi API Table of Contents Installation load_data Usage Parameters Returns Installation Use the following command to install. pip install pro_kabaddi_data load_data Loads files into pandas DataFrames based on provided boolean parameters. Usage data_loader = KabaddiDataAggregator() player_df, team_df, members_df = data_loader.load_data(TeamDetails=False, TeamMembers=False, PlayerDetails=True) Parameters TeamDetails (bool): Loads the details of every team. Default is False . TeamMembers (bool): Loads the members of all teams for the recent season. Default is False . PlayerDetails (bool): Loads all individual attributes of players. Default is True . Returns tuple : A tuple containing the loaded DataFrames in the order (player_details_df, team_details_df, team_members_df).","title":"Home"},{"location":"index_hello/#prokabaddi-api","text":"This documentation covers the main functions of the KabaddiDataAggregator class that return useful data for Kabaddi statistics and information. Note : This documentation is actively being developed alongwith the API.","title":"Prokabaddi API"},{"location":"index_hello/#table-of-contents","text":"Prokabaddi API Table of Contents Installation load_data Usage Parameters Returns","title":"Table of Contents"},{"location":"index_hello/#installation","text":"Use the following command to install. pip install pro_kabaddi_data","title":"Installation"},{"location":"index_hello/#load_data","text":"Loads files into pandas DataFrames based on provided boolean parameters.","title":"load_data"},{"location":"index_hello/#usage","text":"data_loader = KabaddiDataAggregator() player_df, team_df, members_df = data_loader.load_data(TeamDetails=False, TeamMembers=False, PlayerDetails=True)","title":"Usage"},{"location":"index_hello/#parameters","text":"TeamDetails (bool): Loads the details of every team. Default is False . TeamMembers (bool): Loads the members of all teams for the recent season. Default is False . PlayerDetails (bool): Loads all individual attributes of players. Default is True .","title":"Parameters"},{"location":"index_hello/#returns","text":"tuple : A tuple containing the loaded DataFrames in the order (player_details_df, team_details_df, team_members_df).","title":"Returns"},{"location":"index_plannedfeats/","text":"Planned (Future) Features Here are some exciting are some exciting features that our API will be incorporating by the next release, scheduled to be in the coming month. 1. Enable continuous monitoring of all the public data sources Run the API to web-scrape periodically (say, a month) so the data stays current. Maintain the data in an open-source database. Updates when the API runs, after checking for differences. 2. Integration of Machine Learning Models for Sports Analytics Implement in-built calls to scikit-learn predictive models to jump start basic analytics for data-driven decision making Provide predictive insights on player performance, match outcomes, and team strategies 3. Advanced Statistical Correlations Introduce functionality to analyze correlations between various game aspects, such as: Relationship between the number of super raids and matches won Impact of specific skills on team performance against particular opponents Correlation between tackle points and overall defensive performance Relationship between bonus points and total raid points Impact of all-out points on match outcomes Provide insights to help teams optimize their strategies and player selections Implement hypothesis testing to validate traditional kabaddi strategies and beliefs 4. Team and Player Profiling Develop comprehensive profiling tools for teams and individual players Analyze and visualize team-specific strengths, weaknesses, and playing styles Create player performance profiles based on various metrics (e.g., raid success rate , tackle success rate , bonus point efficiency ) Enable comparison of player performances across different seasons 5. Historical Trend Visualization Develop interactive visualizations for historical team and player data Offer graphical representations of performance trends over time Include options for customizable date ranges and specific metrics Create violin plots to comprehensively visualize team behaviors and performances We want to promote a more quantitative and analytical approach to complement traditional intuition-based strategies. Stay tuned for our next release with these exciting new features!","title":"Future Work"},{"location":"index_plannedfeats/#planned-future-features","text":"Here are some exciting are some exciting features that our API will be incorporating by the next release, scheduled to be in the coming month.","title":"Planned (Future) Features"},{"location":"index_plannedfeats/#1-enable-continuous-monitoring-of-all-the-public-data-sources","text":"Run the API to web-scrape periodically (say, a month) so the data stays current. Maintain the data in an open-source database. Updates when the API runs, after checking for differences.","title":"1. Enable continuous monitoring of all the public data sources"},{"location":"index_plannedfeats/#2-integration-of-machine-learning-models-for-sports-analytics","text":"Implement in-built calls to scikit-learn predictive models to jump start basic analytics for data-driven decision making Provide predictive insights on player performance, match outcomes, and team strategies","title":"2. Integration of Machine Learning Models for Sports Analytics"},{"location":"index_plannedfeats/#3-advanced-statistical-correlations","text":"Introduce functionality to analyze correlations between various game aspects, such as: Relationship between the number of super raids and matches won Impact of specific skills on team performance against particular opponents Correlation between tackle points and overall defensive performance Relationship between bonus points and total raid points Impact of all-out points on match outcomes Provide insights to help teams optimize their strategies and player selections Implement hypothesis testing to validate traditional kabaddi strategies and beliefs","title":"3. Advanced Statistical Correlations"},{"location":"index_plannedfeats/#4-team-and-player-profiling","text":"Develop comprehensive profiling tools for teams and individual players Analyze and visualize team-specific strengths, weaknesses, and playing styles Create player performance profiles based on various metrics (e.g., raid success rate , tackle success rate , bonus point efficiency ) Enable comparison of player performances across different seasons","title":"4. Team and Player Profiling"},{"location":"index_plannedfeats/#5-historical-trend-visualization","text":"Develop interactive visualizations for historical team and player data Offer graphical representations of performance trends over time Include options for customizable date ranges and specific metrics Create violin plots to comprehensively visualize team behaviors and performances We want to promote a more quantitative and analytical approach to complement traditional intuition-based strategies. Stay tuned for our next release with these exciting new features!","title":"5. Historical Trend Visualization"},{"location":"index_playerfns/","text":"Player Functions Table of Contents Player Functions Table of Contents get_stats_from_player_profile Usage Parameters Returns player_performance Usage Returns get_all_player_team_url Usage Returns get_players_team_info_and_profile_url Usage Returns player_performance Usage Returns Usage aggregator = KabaddiDataAggregator() player_stats = aggregator.get_stats_from_player_profile(profile_name) Parameters profile_name (str): The player's name. Returns Dict[str, str] : A dictionary containing: Two key-value pairs for player statistics (keys and values depend on the available data) teamName : The name of the player's team get_player_details player_performance Retrieves player performance data from all seasons or particular seasons. Usage aggregator = KabaddiDataAggregator() player_performance_data = aggregator.player_performance() Returns List : A list containing player performance data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. player_performance Retrieves player performance data. Usage aggregator = KabaddiDataAggregator() player_performance_data = aggregator.player_performance() Returns List : A list containing player performance data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. Note : The functions that interact with constantly updating dashboards ( team_line_up , team_level_stats , and player_performance ) may return complex data structures. The exact format of the returned data depends on the structure and content of the Tableau dashboards at the time of extraction.","title":"Player"},{"location":"index_playerfns/#player-functions","text":"","title":"Player Functions"},{"location":"index_playerfns/#table-of-contents","text":"Player Functions Table of Contents get_stats_from_player_profile Usage Parameters Returns player_performance Usage Returns get_all_player_team_url Usage Returns get_players_team_info_and_profile_url Usage Returns player_performance Usage Returns","title":"Table of Contents"},{"location":"index_playerfns/#usage","text":"aggregator = KabaddiDataAggregator() player_stats = aggregator.get_stats_from_player_profile(profile_name)","title":"Usage"},{"location":"index_playerfns/#parameters","text":"profile_name (str): The player's name.","title":"Parameters"},{"location":"index_playerfns/#returns","text":"Dict[str, str] : A dictionary containing: Two key-value pairs for player statistics (keys and values depend on the available data) teamName : The name of the player's team","title":"Returns"},{"location":"index_playerfns/#get_player_details","text":"","title":"get_player_details"},{"location":"index_playerfns/#player_performance","text":"Retrieves player performance data from all seasons or particular seasons.","title":"player_performance"},{"location":"index_playerfns/#usage_1","text":"aggregator = KabaddiDataAggregator() player_performance_data = aggregator.player_performance()","title":"Usage"},{"location":"index_playerfns/#returns_1","text":"List : A list containing player performance data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard.","title":"Returns"},{"location":"index_playerfns/#player_performance_1","text":"Retrieves player performance data.","title":"player_performance"},{"location":"index_playerfns/#usage_2","text":"aggregator = KabaddiDataAggregator() player_performance_data = aggregator.player_performance()","title":"Usage"},{"location":"index_playerfns/#returns_2","text":"List : A list containing player performance data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. Note : The functions that interact with constantly updating dashboards ( team_line_up , team_level_stats , and player_performance ) may return complex data structures. The exact format of the returned data depends on the structure and content of the Tableau dashboards at the time of extraction.","title":"Returns"},{"location":"index_teamfns/","text":"Team Functions Table of Contents Team Functions** get_all_team_names get_all_team_url get_all_player_team_url get_players_team_info_and_profile_url get_stats_from_player_profile team_season_standings get_all_season_team_stats team_line_up team_level_stats player_performance Player Functions get_all_team_names Retrieves the names of all teams in the Pro Kabaddi League. Usage aggregator = KabaddiDataAggregator() team_names = aggregator.get_all_team_names() Returns List[str] : A list of team names. get_all_team_url Retrieves the URLs for all team pages on the Pro Kabaddi website. Usage aggregator = KabaddiDataAggregator() team_urls = aggregator.get_all_team_url() Returns List[str] : A list of URLs for team pages. team_season_standings Retrieves the current season standings for teams in the Pro Kabaddi League. Usage aggregator = KabaddiDataAggregator() standings = aggregator.team_season_standings(team=None, rank=None) Parameters team (str, optional): The name of a specific team to get data for. Case-insensitive. rank (int, optional): The rank (1-12) to get the team data for. Returns If no parameters are provided: List[Dict[str, Union[str, int]]] : A list of dictionaries containing standings for all teams. If team is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the specified team. If rank is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the team at the specified rank. Each dictionary contains: - TeamName : Name of the team - play : Number of matches played - won : Number of matches won - lost : Number of matches lost - draw : Number of matches drawn - points : Total points get_all_season_team_stats Retrieves all season statistics for a specific team. Usage aggregator = KabaddiDataAggregator() team_stats = aggregator.get_all_season_team_stats(url) Parameters url (str): The URL of the team's statistics page. Returns Dict : A dictionary containing various team statistics for the season. The structure depends on the data available on the page. team_line_up Retrieves team line-up data from a Tableau dashboard. Usage aggregator = KabaddiDataAggregator() line_up_data = aggregator.team_line_up() Returns List : A list containing team line-up data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. team_level_stats Retrieves team-level statistics from a Tableau dashboard. Usage aggregator = KabaddiDataAggregator() team_stats = aggregator.team_level_stats() Returns List : A list containing team-level statistics extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. team_season_standings Retrieves the current season standings for teams in the Pro Kabaddi League. Usage aggregator = KabaddiDataAggregator() standings = aggregator.team_season_standings(team=None, rank=None) Parameters team (str, optional): The name of a specific team to get data for. Case-insensitive. rank (int, optional): The rank (1-12) to get the team data for. Returns If no parameters are provided: List[Dict[str, Union[str, int]]] : A list of dictionaries containing standings for all teams. If team is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the specified team. If rank is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the team at the specified rank. Each dictionary contains: - TeamName : Name of the team - play : Number of matches played - won : Number of matches won - lost : Number of matches lost - draw : Number of matches drawn - points : Total points get_all_season_team_stats Retrieves all season statistics for a specific team. Usage aggregator = KabaddiDataAggregator() team_stats = aggregator.get_all_season_team_stats(url) Parameters url (str): The URL of the team's statistics page. Returns Dict : A dictionary containing various team statistics for the season. The structure depends on the data available on the page. team_level_stats Retrieves statistics for all teams for a specified season or all seasons. Usage aggregator = KabaddiDataAggregator() team_stats = aggregator.team_level_stats(season=4) Parameters season : The season to get details of. Defaults to all. Returns List : A list containing team-level statistics extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. team_line_up Retrieves team line-up data from a Tableau dashboard. Usage aggregator = KabaddiDataAggregator() line_up_data = aggregator.team_line_up() Returns List : A list containing team line-up data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. Note : The functions that interact with constantly updating dashboards ( team_line_up and team_level_stats ) may return complex data structures. The exact format of the returned data depends on the structure and content at the time of extraction.","title":"Team Functions"},{"location":"index_teamfns/#team-functions","text":"","title":"Team Functions"},{"location":"index_teamfns/#table-of-contents","text":"Team Functions** get_all_team_names get_all_team_url get_all_player_team_url get_players_team_info_and_profile_url get_stats_from_player_profile team_season_standings get_all_season_team_stats team_line_up team_level_stats player_performance Player Functions","title":"Table of Contents"},{"location":"index_teamfns/#get_all_team_names","text":"Retrieves the names of all teams in the Pro Kabaddi League.","title":"get_all_team_names"},{"location":"index_teamfns/#usage","text":"aggregator = KabaddiDataAggregator() team_names = aggregator.get_all_team_names()","title":"Usage"},{"location":"index_teamfns/#returns","text":"List[str] : A list of team names.","title":"Returns"},{"location":"index_teamfns/#get_all_team_url","text":"Retrieves the URLs for all team pages on the Pro Kabaddi website.","title":"get_all_team_url"},{"location":"index_teamfns/#usage_1","text":"aggregator = KabaddiDataAggregator() team_urls = aggregator.get_all_team_url()","title":"Usage"},{"location":"index_teamfns/#returns_1","text":"List[str] : A list of URLs for team pages.","title":"Returns"},{"location":"index_teamfns/#team_season_standings","text":"Retrieves the current season standings for teams in the Pro Kabaddi League.","title":"team_season_standings"},{"location":"index_teamfns/#usage_2","text":"aggregator = KabaddiDataAggregator() standings = aggregator.team_season_standings(team=None, rank=None)","title":"Usage"},{"location":"index_teamfns/#parameters","text":"team (str, optional): The name of a specific team to get data for. Case-insensitive. rank (int, optional): The rank (1-12) to get the team data for.","title":"Parameters"},{"location":"index_teamfns/#returns_2","text":"If no parameters are provided: List[Dict[str, Union[str, int]]] : A list of dictionaries containing standings for all teams. If team is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the specified team. If rank is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the team at the specified rank. Each dictionary contains: - TeamName : Name of the team - play : Number of matches played - won : Number of matches won - lost : Number of matches lost - draw : Number of matches drawn - points : Total points","title":"Returns"},{"location":"index_teamfns/#get_all_season_team_stats","text":"Retrieves all season statistics for a specific team.","title":"get_all_season_team_stats"},{"location":"index_teamfns/#usage_3","text":"aggregator = KabaddiDataAggregator() team_stats = aggregator.get_all_season_team_stats(url)","title":"Usage"},{"location":"index_teamfns/#parameters_1","text":"url (str): The URL of the team's statistics page.","title":"Parameters"},{"location":"index_teamfns/#returns_3","text":"Dict : A dictionary containing various team statistics for the season. The structure depends on the data available on the page.","title":"Returns"},{"location":"index_teamfns/#team_line_up","text":"Retrieves team line-up data from a Tableau dashboard.","title":"team_line_up"},{"location":"index_teamfns/#usage_4","text":"aggregator = KabaddiDataAggregator() line_up_data = aggregator.team_line_up()","title":"Usage"},{"location":"index_teamfns/#returns_4","text":"List : A list containing team line-up data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard.","title":"Returns"},{"location":"index_teamfns/#team_level_stats","text":"Retrieves team-level statistics from a Tableau dashboard.","title":"team_level_stats"},{"location":"index_teamfns/#usage_5","text":"aggregator = KabaddiDataAggregator() team_stats = aggregator.team_level_stats()","title":"Usage"},{"location":"index_teamfns/#returns_5","text":"List : A list containing team-level statistics extracted from the Tableau dashboard. The structure depends on the data available in the dashboard.","title":"Returns"},{"location":"index_teamfns/#team_season_standings_1","text":"Retrieves the current season standings for teams in the Pro Kabaddi League.","title":"team_season_standings"},{"location":"index_teamfns/#usage_6","text":"aggregator = KabaddiDataAggregator() standings = aggregator.team_season_standings(team=None, rank=None)","title":"Usage"},{"location":"index_teamfns/#parameters_2","text":"team (str, optional): The name of a specific team to get data for. Case-insensitive. rank (int, optional): The rank (1-12) to get the team data for.","title":"Parameters"},{"location":"index_teamfns/#returns_6","text":"If no parameters are provided: List[Dict[str, Union[str, int]]] : A list of dictionaries containing standings for all teams. If team is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the specified team. If rank is provided: Dict[str, Union[str, int]] : A dictionary containing standings for the team at the specified rank. Each dictionary contains: - TeamName : Name of the team - play : Number of matches played - won : Number of matches won - lost : Number of matches lost - draw : Number of matches drawn - points : Total points","title":"Returns"},{"location":"index_teamfns/#get_all_season_team_stats_1","text":"Retrieves all season statistics for a specific team.","title":"get_all_season_team_stats"},{"location":"index_teamfns/#usage_7","text":"aggregator = KabaddiDataAggregator() team_stats = aggregator.get_all_season_team_stats(url)","title":"Usage"},{"location":"index_teamfns/#parameters_3","text":"url (str): The URL of the team's statistics page.","title":"Parameters"},{"location":"index_teamfns/#returns_7","text":"Dict : A dictionary containing various team statistics for the season. The structure depends on the data available on the page.","title":"Returns"},{"location":"index_teamfns/#team_level_stats_1","text":"Retrieves statistics for all teams for a specified season or all seasons.","title":"team_level_stats"},{"location":"index_teamfns/#usage_8","text":"aggregator = KabaddiDataAggregator() team_stats = aggregator.team_level_stats(season=4)","title":"Usage"},{"location":"index_teamfns/#parameters_4","text":"season : The season to get details of. Defaults to all.","title":"Parameters"},{"location":"index_teamfns/#returns_8","text":"List : A list containing team-level statistics extracted from the Tableau dashboard. The structure depends on the data available in the dashboard.","title":"Returns"},{"location":"index_teamfns/#team_line_up_1","text":"Retrieves team line-up data from a Tableau dashboard.","title":"team_line_up"},{"location":"index_teamfns/#usage_9","text":"aggregator = KabaddiDataAggregator() line_up_data = aggregator.team_line_up()","title":"Usage"},{"location":"index_teamfns/#returns_9","text":"List : A list containing team line-up data extracted from the Tableau dashboard. The structure depends on the data available in the dashboard. Note : The functions that interact with constantly updating dashboards ( team_line_up and team_level_stats ) may return complex data structures. The exact format of the returned data depends on the structure and content at the time of extraction.","title":"Returns"}]}